# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import services_pb2 as services__pb2


class ServerRegistryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterServer = channel.unary_unary(
                '/grpc_implementation.ServerRegistry/RegisterServer',
                request_serializer=services__pb2.ServerMessage.SerializeToString,
                response_deserializer=services__pb2.Result.FromString,
                )
        self.GetServerList = channel.unary_unary(
                '/grpc_implementation.ServerRegistry/GetServerList',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=services__pb2.ServerList.FromString,
                )


class ServerRegistryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServerList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerRegistryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterServer': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterServer,
                    request_deserializer=services__pb2.ServerMessage.FromString,
                    response_serializer=services__pb2.Result.SerializeToString,
            ),
            'GetServerList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerList,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=services__pb2.ServerList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_implementation.ServerRegistry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServerRegistry(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_implementation.ServerRegistry/RegisterServer',
            services__pb2.ServerMessage.SerializeToString,
            services__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServerList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_implementation.ServerRegistry/GetServerList',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            services__pb2.ServerList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.JoinServer = channel.unary_unary(
                '/grpc_implementation.Server/JoinServer',
                request_serializer=services__pb2.Client.SerializeToString,
                response_deserializer=services__pb2.Result.FromString,
                )
        self.LeaveSever = channel.unary_unary(
                '/grpc_implementation.Server/LeaveSever',
                request_serializer=services__pb2.Client.SerializeToString,
                response_deserializer=services__pb2.Result.FromString,
                )
        self.PublishArticle = channel.unary_unary(
                '/grpc_implementation.Server/PublishArticle',
                request_serializer=services__pb2.ArticleRequest.SerializeToString,
                response_deserializer=services__pb2.Result.FromString,
                )
        self.GetArticle = channel.unary_unary(
                '/grpc_implementation.Server/GetArticle',
                request_serializer=services__pb2.ArticleRequest.SerializeToString,
                response_deserializer=services__pb2.ArticleList.FromString,
                )


class ServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def JoinServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LeaveSever(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishArticle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetArticle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'JoinServer': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinServer,
                    request_deserializer=services__pb2.Client.FromString,
                    response_serializer=services__pb2.Result.SerializeToString,
            ),
            'LeaveSever': grpc.unary_unary_rpc_method_handler(
                    servicer.LeaveSever,
                    request_deserializer=services__pb2.Client.FromString,
                    response_serializer=services__pb2.Result.SerializeToString,
            ),
            'PublishArticle': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishArticle,
                    request_deserializer=services__pb2.ArticleRequest.FromString,
                    response_serializer=services__pb2.Result.SerializeToString,
            ),
            'GetArticle': grpc.unary_unary_rpc_method_handler(
                    servicer.GetArticle,
                    request_deserializer=services__pb2.ArticleRequest.FromString,
                    response_serializer=services__pb2.ArticleList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_implementation.Server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Server(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def JoinServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_implementation.Server/JoinServer',
            services__pb2.Client.SerializeToString,
            services__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LeaveSever(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_implementation.Server/LeaveSever',
            services__pb2.Client.SerializeToString,
            services__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishArticle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_implementation.Server/PublishArticle',
            services__pb2.ArticleRequest.SerializeToString,
            services__pb2.Result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetArticle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_implementation.Server/GetArticle',
            services__pb2.ArticleRequest.SerializeToString,
            services__pb2.ArticleList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
